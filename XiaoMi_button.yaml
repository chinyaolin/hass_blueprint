blueprint:
  name: Xiaomi Mijia Wireless Switch (WXKG01LM) 
  description: '利用 zigbee2mqtt 接入米家無線開關 控制設備開關
    
    透過 zigbee2mqtt 接入, 支援 單擊/雙擊/三連擊/四連擊/多連擊 以及 「長按」
    '
  domain: automation
  input:
    mijia_button:
      name: 小米米家無線開關
      description: '選擇無線開關的 entity_id, 通常為 sensor.0x00158d0000000000_action'
      default: []
      selector:
        entity:
          domain: sensor
    mijia_button_single:    { name: 單擊(single),      default: [], selector: { action: {} } }        
    mijia_button_hold:      { name: 長按(hold),        default: [], selector: { action: {} } }        
    mijia_button_double:    { name: 雙擊(double),      default: [], selector: { action: {} } }        
    mijia_button_triple:    { name: 三連擊(triple),    default: [], selector: { action: {} } }        
    mijia_button_quadruple: { name: 四連擊(quadruple), default: [], selector: { action: {} } }        
    mijia_button_many:      { name: 多連擊(many),      default: [], selector: { action: {} }, description: 連續點擊超過四次即觸發這個動作 }        
variables:
  button_action: '{{ trigger.to_state.state }}'
mode: single
max_exceeded: silent
trigger:
  # 可使用狀態為 : single, double, triple, quadruple, many, hold, release
  - { platform: state, entity_id: !input 'mijia_button' }
condition: []
action:
  # IF
  - choose:
      - conditions: '{{ button_action == "single" }}'
        sequence: !input 'mijia_button_single'

      - conditions: '{{ button_action == "hold" }}'
        sequence: !input 'mijia_button_hold'

      - conditions: '{{ button_action == "double" }}'
        sequence: !input 'mijia_button_double'

      - conditions: '{{ button_action == "triple" }}'
        sequence: !input 'mijia_button_triple'

      - conditions: '{{ button_action == "quadruple" }}'
        sequence: !input 'mijia_button_quadruple'

      - conditions: '{{ button_action == "single" }}'
        sequence: !input 'mijia_button_single'

# trigger:
#   - platform: time_pattern
#     minutes: "*"
# condition: []
# action:
#   - wait_template: '{{ as_timestamp(states(timestamp_sensor)) != None }}'
#   - wait_template: >-
#       {{ 0 < as_timestamp(states(timestamp_sensor)) -
#       as_timestamp(states('sensor.date_time_iso')) < 60 *
#       float(sunrise_duration) }}
#   - choose: []
#     default: !input pre_sunrise_actions
#   - service: light.turn_on
#     data:
#       brightness_pct: 1
#       color_temp: '{{ start_mired }}'
#     entity_id: !input light_entity
#   - repeat:
#       while:
#         - condition: template
#           value_template: '{{ as_timestamp(states(timestamp_sensor)) != None }}'
#         - condition: template
#           value_template: >-
#             {{ 0 < as_timestamp(states(timestamp_sensor)) -
#             as_timestamp(states('sensor.date_time_iso')) < 60 *
#             float(sunrise_duration) }}
#       sequence:
#         - delay: '00:00:05'
#         - choose:
#             - conditions:
#                 - condition: state
#                   entity_id: !input light_entity
#                   state: 'on'
#               sequence:
#                 - service: light.turn_on
#                   data:
#                     brightness_pct: >-
#                       {{ (100 - (100 *
#                       (as_timestamp(states(timestamp_sensor)) -
#                       as_timestamp(now())) /
#                       (float(sunrise_duration) * 60))) | int }}
#                     color_temp: >-
#                       {{ (float(end_mired) + (float(start_mired) - float(end_mired)) *
#                       ((as_timestamp(states(timestamp_sensor)) -
#                       as_timestamp(now())) /
#                       (float(sunrise_duration) * 60))) | int }}
#                   entity_id: !input light_entity
